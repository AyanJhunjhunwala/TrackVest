                  <motion.div 
                    className="absolute h-full rounded-lg transition-colors duration-300"
                    animate={{
                      left: `${tabs.findIndex(t => t.id === activeTab) * 25}%`,
                      backgroundColor: darkMode ? 'rgb(51, 65, 85)' : 'rgb(255, 255, 255)',
                      boxShadow: darkMode ? '0 1px 3px rgba(0,0,0,0.3)' : '0 1px 3px rgba(0,0,0,0.1)'
                    }}
                    transition={{
                      type: "spring",
                      stiffness: 300,
                      damping: 30
                    }}
                    style={{ width: '25%' }}
                  />

                  {/* Tab Buttons */}
                  {tabs.map(tab => (
                    <motion.button
                      key={tab.id}
                      onClick={() => setActiveTab(tab.id)}
                      className={`
                        flex items-center space-x-1 px-3 py-2 rounded-lg text-sm font-medium
                        w-1/4 justify-center z-10 transition-colors duration-300
                        ${activeTab === tab.id
                          ? darkMode
                            ? 'text-white'
                            : 'text-slate-800'
                          : darkMode
                            ? 'text-slate-400 hover:text-slate-300'
                            : 'text-slate-600 hover:text-slate-800'
                        }
                      `}
                      whileHover={{ scale: 1.05 }}
                      whileTap={{ scale: 0.95 }}
                    >
                      {tab.icon}
                      <span>{tab.label}</span>
                    </motion.button>
                  ))}
                </div>
              </motion.div>
              
              {/* Search Box (simplified from CSE) */}
              {showSearch && (
                <div className="p-3 border-b border-slate-200 dark:border-slate-700 flex flex-col">
                  <form onSubmit={handleSearchSubmit} className="flex items-center mb-2">
                    <motion.input
                      ref={searchInputRef}
                      type="text"
                      value={searchInput}
                      onChange={(e) => setSearchInput(e.target.value)}
                      placeholder="Search financial information..."
                      className={`flex-1 px-4 py-2 rounded-l-md border-r-0 focus:outline-none transition-all border shadow-sm ${
                        darkMode 
                          ? 'bg-slate-800 border-slate-700 text-white' 
                          : 'bg-white border-slate-200 text-slate-800'
                      }`}
                      animate={{
                        backgroundColor: darkMode ? 'rgb(30, 41, 59)' : 'rgb(255, 255, 255)',
                        borderColor: darkMode ? 'rgb(51, 65, 85)' : 'rgb(226, 232, 240)'
                      }}
                    />
                    <Button
                      type="submit"
                      className={`rounded-l-none rounded-r-md px-4 py-2 h-full ${
                        darkMode 
                          ? 'bg-blue-600 hover:bg-blue-500 text-white' 
                          : 'bg-blue-500 hover:bg-blue-400 text-white'
                      }`}
                    >
                      <Search className="h-4 w-4 mr-1" />
                      Search
                    </Button>
                  </form>
                  
                  <div className={`text-sm p-2 ${darkMode ? 'text-slate-400' : 'text-slate-600'}`}>
                    {webSearchEnabled ? (
                      <>
                        <p>Web search is enabled! Your queries will be enhanced with real-time information from the web using Gemini API's grounding feature.</p>
                      </>
                    ) : (
                      <>
                        <p>Turn on web search in the header to enhance responses with real-time information from the web.</p>
                      </>
                    )}
                  </div>
                </div>
              )}
              
              {/* Tab Content with Animation */}
              <div className="flex-1 overflow-hidden">
                <AnimatePresence mode="wait">
                  {/* Chat Tab */}
                  {activeTab === 'chat' && (
                    <motion.div 
                      key="chat-tab"
                      className={`h-full flex flex-col transition-colors duration-300 ${darkMode ? 'text-slate-200' : 'text-slate-700'}`}
                      variants={tabContentVariants}
                      initial="hidden"
                      animate="visible"
                      exit="exit"
                    >
                      {/* Chat messages */}
                      <div className="flex-1 overflow-y-auto p-5">
                        {messages.filter(m => m.role !== 'system').map((message, index) => (
                          renderMessage(message, index))
                        )}
                        {isLoading && (
                          <div className="text-left mb-4">
                            <div className={`
                              inline-block max-w-[80%] px-5 py-3 rounded-2xl transition-colors duration-300
                              ${darkMode ? 'bg-slate-800 text-white' : 'bg-slate-100 text-slate-800'}
                            `}>
                              <div className="flex space-x-3">
                                <div className="w-2 h-2 rounded-full bg-current animate-bounce"></div>
                                <div className="w-2 h-2 rounded-full bg-current animate-bounce" style={{ animationDelay: '0.2s' }}></div>
                                <div className="w-2 h-2 rounded-full bg-current animate-bounce" style={{ animationDelay: '0.4s' }}></div>
                              </div>
                            </div>
                          </div>
                        )}
                        <div ref={messageEndRef} />
                      </div>
                      
                      {/* Chat input */}
                      <motion.form 
                        onSubmit={handleSubmit} 
                        animate={{
                          backgroundColor: darkMode ? 'rgb(30, 41, 59)' : 'rgb(248, 250, 252)',
                          borderColor: darkMode ? 'rgb(51, 65, 85)' : 'rgb(226, 232, 240)'
                        }}
                        className="p-4 border-t flex items-center"
                      >
                        <motion.input
                          ref={inputRef}
                          type="text"
                          value={input}
                          onChange={(e) => setInput(e.target.value)}
                          placeholder="Ask about your portfolio..."
                          disabled={isLoading}
                          animate={{
                            backgroundColor: darkMode ? 'rgb(15, 23, 42)' : 'rgb(255, 255, 255)',
                            color: darkMode ? 'rgb(255, 255, 255)' : 'rgb(30, 41, 59)',
                            borderColor: darkMode ? 'rgb(51, 65, 85)' : 'rgb(226, 232, 240)'
                          }}
                          className="flex-1 px-5 py-3 rounded-full focus:outline-none transition-all border shadow-sm focus:ring-2 focus:ring-emerald-500/50"
                        />
                        <Button
                          type="submit"
                          disabled={isLoading || !input.trim()}
                          className={`
                            ml-2 h-12 w-12 p-0 rounded-full flex items-center justify-center
                            ${darkMode ? 'bg-emerald-600 hover:bg-emerald-500' : 'bg-emerald-500 hover:bg-emerald-400'}
                            transition-all duration-200
                          `}
                        >
                          <Send className="h-5 w-5 text-white" />
                        </Button>
                      </motion.form>
                    </motion.div>
                  )}
                  
                  {/* Stocks Tab */}
                  {activeTab === 'stocks' && (
                    <motion.div 
                      key="stocks-tab"
                      className="h-full overflow-y-auto p-5"
                      variants={enhancedTabVariants}
                      initial="hidden"
                      animate="visible"
                      exit="exit"
                    >
                      <motion.h3 
                        className={`text-lg font-semibold mb-4 transition-colors duration-300 ${darkMode ? 'text-white' : 'text-slate-800'}`}
                        variants={cardItemVariants}
                      >
                        Popular Stocks
                      </motion.h3>
                      
                      {isStockLoading ? (
                        <div className="flex justify-center items-center h-64">
                          <div className="flex space-x-2">
                            <div className="w-3 h-3 rounded-full bg-blue-500 animate-bounce"></div>
                            <div className="w-3 h-3 rounded-full bg-blue-500 animate-bounce" style={{ animationDelay: '0.2s' }}></div>
                            <div className="w-3 h-3 rounded-full bg-blue-500 animate-bounce" style={{ animationDelay: '0.4s' }}></div>
                          </div>
                        </div>
                      ) : stockData.length > 0 ? (
                        <div>
                          <motion.div 
                            variants={cardItemVariants}
                            className={`text-sm mb-4 transition-colors duration-300 ${darkMode ? 'text-slate-400' : 'text-slate-600'}`}
                          >
                            Click on any stock to ask the assistant about it
                          </motion.div>
                          {stockData.map((stock, index) => (
                            <motion.div
                              key={stock.symbol}
                              variants={cardItemVariants}
                              custom={index}
                            >
                              {renderStockCard(stock)}
                            </motion.div>
                          ))}
                        </div>
                      ) : (
                        <motion.div 
                          className={`p-4 rounded-xl mb-4 transition-colors duration-300 ${darkMode ? 'bg-slate-800' : 'bg-slate-100'}`}
                          variants={cardItemVariants}
                          animate={{
                            backgroundColor: darkMode ? 'rgb(30, 41, 59)' : 'rgb(241, 245, 249)'
                          }}
                        >
                          <p className={`text-sm transition-colors duration-300 ${darkMode ? 'text-slate-300' : 'text-slate-600'}`}>
                            Unable to load stock data. Please try again later.
                          </p>
                        </motion.div>
                      )}
                    </motion.div>
                  )}
                  
                  {/* Crypto Tab */}
                  {activeTab === 'crypto' && (
                    <motion.div 
                      key="crypto-tab"
                      className="h-full overflow-y-auto p-5"
                      variants={enhancedTabVariants}
                      initial="hidden"
                      animate="visible"
                      exit="exit"
                    >
                      <motion.h3 
                        className={`text-lg font-semibold mb-4 transition-colors duration-300 ${darkMode ? 'text-white' : 'text-slate-800'}`}
                        variants={cardItemVariants}
                      >
                        Top Cryptocurrencies
                      </motion.h3>
                      
                      {isCryptoLoading ? (
                        <div className="flex justify-center items-center h-64">
                          <div className="flex space-x-2">
                            <div className="w-3 h-3 rounded-full bg-emerald-500 animate-bounce"></div>
                            <div className="w-3 h-3 rounded-full bg-emerald-500 animate-bounce" style={{ animationDelay: '0.2s' }}></div>
                            <div className="w-3 h-3 rounded-full bg-emerald-500 animate-bounce" style={{ animationDelay: '0.4s' }}></div>
                          </div>
                        </div>
                      ) : cryptoData.length > 0 ? (
                        <div>
                          <motion.div 
                            variants={cardItemVariants}
                            className={`text-sm mb-4 transition-colors duration-300 ${darkMode ? 'text-slate-400' : 'text-slate-600'}`}
                          >
                            Click on any cryptocurrency to ask the assistant about it
                          </motion.div>
                          {cryptoData.map((crypto, index) => (
                            <motion.div
                              key={crypto.id}
                              variants={cardItemVariants}
                              custom={index}
                            >
                              {renderCryptoCard(crypto)}
                            </motion.div>
                          ))}
                        </div>
                      ) : (
                        <motion.div 
                          className={`p-4 rounded-xl mb-4`}
                          variants={cardItemVariants}
                          animate={{
                            backgroundColor: darkMode ? 'rgb(30, 41, 59)' : 'rgb(241, 245, 249)'
                          }}
                        >
                          <p className={`text-sm transition-colors duration-300 ${darkMode ? 'text-slate-300' : 'text-slate-600'}`}>
                            Unable to load cryptocurrency data. Please try again later.
                          </p>
                        </motion.div>
                      )}
                    </motion.div>
                  )}
                  
                  {/* Insights Tab */}
                  {activeTab === 'insights' && (
                    <motion.div 
                      key="insights-tab"
                      className="h-full overflow-y-auto p-5"
                      variants={tabContentVariants}
                      initial="hidden"
                      animate="visible"
                      exit="exit"
                    >
                      <h3 className={`text-lg font-semibold mb-4 transition-colors duration-300 ${darkMode ? 'text-white' : 'text-slate-800'}`}>
                        Financial Insights
                      </h3>
                      
                      {insights.length > 0 ? (
                        <div>
                          <div className={`text-sm mb-4 transition-colors duration-300 ${darkMode ? 'text-slate-400' : 'text-slate-600'}`}>
                            Charts created by the AI assistant
                          </div>
                          {insights.map((insight, index) => (
                            <motion.div
                              key={insight.id}
                              initial={{ opacity: 0, y: 20 }}
                              animate={{ opacity: 1, y: 0 }}
                              transition={{ 
                                duration: 0.3,
                                delay: index * 0.1,
                                type: "spring",
                                stiffness: 100
                              }}
                            >
                              {renderInsightCard(insight)}
                            </motion.div>
                          ))}
                        </div>
                      ) : (
                        <motion.div 
                          className={`p-6 rounded-xl mb-4 text-center`}
                          animate={{
                            backgroundColor: darkMode ? 'rgb(30, 41, 59)' : 'rgb(241, 245, 249)'
                          }}
                        >
                          <BarChart4 className="mx-auto h-12 w-12 mb-3 transition-colors duration-300" style={{ color: darkMode ? 'rgb(71, 85, 105)' : 'rgb(148, 163, 184)' }} />
                          <h4 className={`text-lg font-medium mb-2 transition-colors duration-300 ${darkMode ? 'text-white' : 'text-slate-800'}`}>
                            No insights yet
                          </h4>
                          <p className={`text-sm max-w-md mx-auto transition-colors duration-300 ${darkMode ? 'text-slate-400' : 'text-slate-600'}`}>
                            Ask the assistant to create charts for stocks or cryptocurrencies.
                            For example, try asking "Show me a chart for Apple stock"
                          </p>
                          <Button
                            onClick={() => {
                              setActiveTab('chat');
                              setInput('Show me a chart of the S&P 500 vs Bitcoin over the last month');
                              setTimeout(() => {
                                inputRef.current?.focus();
                              }, 100);
                            }}
                            className="mt-4 transition-colors duration-300"
                            style={{ 
                              backgroundColor: darkMode ? 'rgb(51, 65, 85)' : 'rgb(226, 232, 240)',
                              color: darkMode ? 'rgb(248, 250, 252)' : 'rgb(30, 41, 59)'
                            }}
                            variant="outline"
                          >
                            Create example chart
                          </Button>
                        </motion.div>
                      )}
                    </motion.div>
                  )}
                </AnimatePresence>
              </div>
            </motion.div>
          </motion.div>
        )}
      </AnimatePresence>
    </>
  );
}